// source: task.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var metadata_pb = require('./metadata_pb.js');
goog.object.extend(proto, metadata_pb);
goog.exportSymbol('proto.atlas.Task', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.atlas.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.atlas.Task.repeatedFields_, null);
};
goog.inherits(proto.atlas.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.atlas.Task.displayName = 'proto.atlas.Task';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.atlas.Task.repeatedFields_ = [300,400,500];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.atlas.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.atlas.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.atlas.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.atlas.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && metadata_pb.Metadata.toObject(includeInstance, f),
    bytes: msg.getBytes_asB64(),
    subjectsList: jspb.Message.toObjectList(msg.getSubjectsList(),
    metadata_pb.Metadata.toObject, includeInstance),
    parentsList: jspb.Message.toObjectList(msg.getParentsList(),
    proto.atlas.Task.toObject, includeInstance),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.atlas.Task.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.atlas.Task}
 */
proto.atlas.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.atlas.Task;
  return proto.atlas.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.atlas.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.atlas.Task}
 */
proto.atlas.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new metadata_pb.Metadata;
      reader.readMessage(value,metadata_pb.Metadata.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 200:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    case 300:
      var value = new metadata_pb.Metadata;
      reader.readMessage(value,metadata_pb.Metadata.deserializeBinaryFromReader);
      msg.addSubjects(value);
      break;
    case 400:
      var value = new proto.atlas.Task;
      reader.readMessage(value,proto.atlas.Task.deserializeBinaryFromReader);
      msg.addParents(value);
      break;
    case 500:
      var value = new proto.atlas.Task;
      reader.readMessage(value,proto.atlas.Task.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.atlas.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.atlas.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.atlas.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.atlas.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      metadata_pb.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      200,
      f
    );
  }
  f = message.getSubjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      300,
      f,
      metadata_pb.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getParentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      400,
      f,
      proto.atlas.Task.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      500,
      f,
      proto.atlas.Task.serializeBinaryToWriter
    );
  }
};


/**
 * optional Metadata header = 100;
 * @return {?proto.atlas.Metadata}
 */
proto.atlas.Task.prototype.getHeader = function() {
  return /** @type{?proto.atlas.Metadata} */ (
    jspb.Message.getWrapperField(this, metadata_pb.Metadata, 100));
};


/**
 * @param {?proto.atlas.Metadata|undefined} value
 * @return {!proto.atlas.Task} returns this
*/
proto.atlas.Task.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.atlas.Task} returns this
 */
proto.atlas.Task.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.atlas.Task.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional bytes bytes = 200;
 * @return {string}
 */
proto.atlas.Task.prototype.getBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 200, ""));
};


/**
 * optional bytes bytes = 200;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.atlas.Task.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 200;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.atlas.Task.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.atlas.Task} returns this
 */
proto.atlas.Task.prototype.setBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 200, value);
};


/**
 * repeated Metadata subjects = 300;
 * @return {!Array<!proto.atlas.Metadata>}
 */
proto.atlas.Task.prototype.getSubjectsList = function() {
  return /** @type{!Array<!proto.atlas.Metadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, metadata_pb.Metadata, 300));
};


/**
 * @param {!Array<!proto.atlas.Metadata>} value
 * @return {!proto.atlas.Task} returns this
*/
proto.atlas.Task.prototype.setSubjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 300, value);
};


/**
 * @param {!proto.atlas.Metadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.atlas.Metadata}
 */
proto.atlas.Task.prototype.addSubjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 300, opt_value, proto.atlas.Metadata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.atlas.Task} returns this
 */
proto.atlas.Task.prototype.clearSubjectsList = function() {
  return this.setSubjectsList([]);
};


/**
 * repeated Task parents = 400;
 * @return {!Array<!proto.atlas.Task>}
 */
proto.atlas.Task.prototype.getParentsList = function() {
  return /** @type{!Array<!proto.atlas.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.atlas.Task, 400));
};


/**
 * @param {!Array<!proto.atlas.Task>} value
 * @return {!proto.atlas.Task} returns this
*/
proto.atlas.Task.prototype.setParentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 400, value);
};


/**
 * @param {!proto.atlas.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.atlas.Task}
 */
proto.atlas.Task.prototype.addParents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 400, opt_value, proto.atlas.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.atlas.Task} returns this
 */
proto.atlas.Task.prototype.clearParentsList = function() {
  return this.setParentsList([]);
};


/**
 * repeated Task children = 500;
 * @return {!Array<!proto.atlas.Task>}
 */
proto.atlas.Task.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.atlas.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.atlas.Task, 500));
};


/**
 * @param {!Array<!proto.atlas.Task>} value
 * @return {!proto.atlas.Task} returns this
*/
proto.atlas.Task.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 500, value);
};


/**
 * @param {!proto.atlas.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.atlas.Task}
 */
proto.atlas.Task.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 500, opt_value, proto.atlas.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.atlas.Task} returns this
 */
proto.atlas.Task.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};


goog.object.extend(exports, proto.atlas);
