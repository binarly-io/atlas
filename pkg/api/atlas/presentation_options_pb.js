// source: presentation_options.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var compression_pb = require('./compression_pb.js');
goog.object.extend(proto, compression_pb);
var digest_pb = require('./digest_pb.js');
goog.object.extend(proto, digest_pb);
var encoding_pb = require('./encoding_pb.js');
goog.object.extend(proto, encoding_pb);
goog.exportSymbol('proto.atlas.PresentationOptions', null, global);
goog.exportSymbol('proto.atlas.PresentationOptions.CompressionOptionalCase', null, global);
goog.exportSymbol('proto.atlas.PresentationOptions.DigestOptionalCase', null, global);
goog.exportSymbol('proto.atlas.PresentationOptions.EncodingOptionalCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.atlas.PresentationOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.atlas.PresentationOptions.oneofGroups_);
};
goog.inherits(proto.atlas.PresentationOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.atlas.PresentationOptions.displayName = 'proto.atlas.PresentationOptions';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.atlas.PresentationOptions.oneofGroups_ = [[800],[900],[1400]];

/**
 * @enum {number}
 */
proto.atlas.PresentationOptions.EncodingOptionalCase = {
  ENCODING_OPTIONAL_NOT_SET: 0,
  ENCODING: 800
};

/**
 * @return {proto.atlas.PresentationOptions.EncodingOptionalCase}
 */
proto.atlas.PresentationOptions.prototype.getEncodingOptionalCase = function() {
  return /** @type {proto.atlas.PresentationOptions.EncodingOptionalCase} */(jspb.Message.computeOneofCase(this, proto.atlas.PresentationOptions.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.atlas.PresentationOptions.CompressionOptionalCase = {
  COMPRESSION_OPTIONAL_NOT_SET: 0,
  COMPRESSION: 900
};

/**
 * @return {proto.atlas.PresentationOptions.CompressionOptionalCase}
 */
proto.atlas.PresentationOptions.prototype.getCompressionOptionalCase = function() {
  return /** @type {proto.atlas.PresentationOptions.CompressionOptionalCase} */(jspb.Message.computeOneofCase(this, proto.atlas.PresentationOptions.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.atlas.PresentationOptions.DigestOptionalCase = {
  DIGEST_OPTIONAL_NOT_SET: 0,
  DIGEST: 1400
};

/**
 * @return {proto.atlas.PresentationOptions.DigestOptionalCase}
 */
proto.atlas.PresentationOptions.prototype.getDigestOptionalCase = function() {
  return /** @type {proto.atlas.PresentationOptions.DigestOptionalCase} */(jspb.Message.computeOneofCase(this, proto.atlas.PresentationOptions.oneofGroups_[2]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.atlas.PresentationOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.atlas.PresentationOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.atlas.PresentationOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.atlas.PresentationOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoding: (f = msg.getEncoding()) && encoding_pb.Encoding.toObject(includeInstance, f),
    compression: (f = msg.getCompression()) && compression_pb.Compression.toObject(includeInstance, f),
    digest: (f = msg.getDigest()) && digest_pb.Digest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.atlas.PresentationOptions}
 */
proto.atlas.PresentationOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.atlas.PresentationOptions;
  return proto.atlas.PresentationOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.atlas.PresentationOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.atlas.PresentationOptions}
 */
proto.atlas.PresentationOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 800:
      var value = new encoding_pb.Encoding;
      reader.readMessage(value,encoding_pb.Encoding.deserializeBinaryFromReader);
      msg.setEncoding(value);
      break;
    case 900:
      var value = new compression_pb.Compression;
      reader.readMessage(value,compression_pb.Compression.deserializeBinaryFromReader);
      msg.setCompression(value);
      break;
    case 1400:
      var value = new digest_pb.Digest;
      reader.readMessage(value,digest_pb.Digest.deserializeBinaryFromReader);
      msg.setDigest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.atlas.PresentationOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.atlas.PresentationOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.atlas.PresentationOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.atlas.PresentationOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncoding();
  if (f != null) {
    writer.writeMessage(
      800,
      f,
      encoding_pb.Encoding.serializeBinaryToWriter
    );
  }
  f = message.getCompression();
  if (f != null) {
    writer.writeMessage(
      900,
      f,
      compression_pb.Compression.serializeBinaryToWriter
    );
  }
  f = message.getDigest();
  if (f != null) {
    writer.writeMessage(
      1400,
      f,
      digest_pb.Digest.serializeBinaryToWriter
    );
  }
};


/**
 * optional Encoding encoding = 800;
 * @return {?proto.atlas.Encoding}
 */
proto.atlas.PresentationOptions.prototype.getEncoding = function() {
  return /** @type{?proto.atlas.Encoding} */ (
    jspb.Message.getWrapperField(this, encoding_pb.Encoding, 800));
};


/**
 * @param {?proto.atlas.Encoding|undefined} value
 * @return {!proto.atlas.PresentationOptions} returns this
*/
proto.atlas.PresentationOptions.prototype.setEncoding = function(value) {
  return jspb.Message.setOneofWrapperField(this, 800, proto.atlas.PresentationOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.atlas.PresentationOptions} returns this
 */
proto.atlas.PresentationOptions.prototype.clearEncoding = function() {
  return this.setEncoding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.atlas.PresentationOptions.prototype.hasEncoding = function() {
  return jspb.Message.getField(this, 800) != null;
};


/**
 * optional Compression compression = 900;
 * @return {?proto.atlas.Compression}
 */
proto.atlas.PresentationOptions.prototype.getCompression = function() {
  return /** @type{?proto.atlas.Compression} */ (
    jspb.Message.getWrapperField(this, compression_pb.Compression, 900));
};


/**
 * @param {?proto.atlas.Compression|undefined} value
 * @return {!proto.atlas.PresentationOptions} returns this
*/
proto.atlas.PresentationOptions.prototype.setCompression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 900, proto.atlas.PresentationOptions.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.atlas.PresentationOptions} returns this
 */
proto.atlas.PresentationOptions.prototype.clearCompression = function() {
  return this.setCompression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.atlas.PresentationOptions.prototype.hasCompression = function() {
  return jspb.Message.getField(this, 900) != null;
};


/**
 * optional Digest digest = 1400;
 * @return {?proto.atlas.Digest}
 */
proto.atlas.PresentationOptions.prototype.getDigest = function() {
  return /** @type{?proto.atlas.Digest} */ (
    jspb.Message.getWrapperField(this, digest_pb.Digest, 1400));
};


/**
 * @param {?proto.atlas.Digest|undefined} value
 * @return {!proto.atlas.PresentationOptions} returns this
*/
proto.atlas.PresentationOptions.prototype.setDigest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1400, proto.atlas.PresentationOptions.oneofGroups_[2], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.atlas.PresentationOptions} returns this
 */
proto.atlas.PresentationOptions.prototype.clearDigest = function() {
  return this.setDigest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.atlas.PresentationOptions.prototype.hasDigest = function() {
  return jspb.Message.getField(this, 1400) != null;
};


goog.object.extend(exports, proto.atlas);
